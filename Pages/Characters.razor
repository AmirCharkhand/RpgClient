@using RPGClient.Components.Character
@using RPGClient.Extensions
@using RPGClient.Models.Character
@inject IDialogService DialogService
@page "/Characters"

<MudContainer Fixed="true" Class="d-flex justify-center mb-2">
    <Toolbar @ref="_toolbar" OnAddBtnClicked="AddNewCharacter" OnEditBtnClicked="UpdateCharacter" OnRemoveBtnClicked="DeleteCharacters"/>
</MudContainer>
<CharacterList @ref="_characterList" OnSelectedRowsChanged="ChangeSelectedCharactersArray"/>

@code
{
    private Toolbar _toolbar = null!;
    private CharacterList _characterList = null!;
    private GetOwnedCharacterDto[]? _selectedCharacters;
    private readonly DialogOptions _options = new()
    {
        CloseOnEscapeKey = true,
        Position = DialogPosition.Center,
        MaxWidth = MaxWidth.Small,
        FullWidth = true
    };

    private void ChangeSelectedCharactersArray(GetOwnedCharacterDto[] selectedCharacters)
    {
        _selectedCharacters = selectedCharacters;
        ChangeToolbarState(_selectedCharacters.Length);
    }
    
    private void ChangeToolbarState(int itemsCount) => _toolbar.ChangeButtonsState(itemsCount);
    
    private async Task AddNewCharacter()
    {
        await DialogService.ShowAsync<AddCharacter>("New Character", _options, () => _characterList.ReloadTable());
    }

    private async Task UpdateCharacter()
    {
        var selectedCharacter = (_selectedCharacters ?? throw new InvalidOperationException()).First();
        var updateDto = new UpdateCharacterDto()
        {
            Name = selectedCharacter.Name,
            Attack = selectedCharacter.Attack,
            Defence = selectedCharacter.Defence,
            Health = selectedCharacter.Health,
            Strength = selectedCharacter.Strength,
            Type = selectedCharacter.Type
        };
        var dialogParams = new DialogParameters
        {
            { "CharacterId", selectedCharacter.Id },
            { "Model", updateDto }
        };
        await DialogService.ShowAsync<UpdateCharacter>("Update Character", dialogParams, _options, () => _characterList.ReloadTable());
    }

    private async Task DeleteCharacters()
    {
        if (_selectedCharacters == null) throw new InvalidOperationException();
        var dialogParams = new DialogParameters { { "Characters", _selectedCharacters } };
        await DialogService.ShowAsync<RemoveCharacter>("Remove", dialogParams, _options, () => _characterList.ReloadTable());
    }
}